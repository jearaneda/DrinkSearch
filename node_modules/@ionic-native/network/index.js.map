{"version":3,"sources":["../../../src/@ionic-native/plugins/network/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,eAAA,EAAiB,MAAA,EAAQ,YAAA,EAAc,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACvG,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAC7C,OAAO,2BAAA,CAA4B;AAKnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AASH;IAA6B,2BAAiB;IAA9C;;IAmDA,CAAC;IAnCC;;;OAGG;IAEH,0BAAQ,GAAR;QACE,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;IACjE,CAAC;IAED;;;OAGG;IAKH,8BAAY,GAAZ,cAAkC,MAAM,CAAC,CAAC,CAAC;IAE3C;;;OAGG;IAKH,2BAAS,GAAT,cAA+B,MAAM,CAAC,CAAC,CAAC;IAEnC,kBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,sBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CALC;IAtCA;QADC,eAAe;;yCACH;IAOb;QADC,eAAe;;gDACI;IAOpB;QADC,YAAY,EAAE;;;wCACH,UAAU;2CAErB;IAUD;QAJC,OAAO,CAAC;YACP,eAAe,EAAE,IAAI;YACrB,KAAK,EAAE,SAAS;SACjB,CAAC;;;wCACc,UAAU;+CAAiB;IAU3C;QAJC,OAAO,CAAC;YACP,eAAe,EAAE,IAAI;YACrB,KAAK,EAAE,QAAQ;SAChB,CAAC;;;wCACW,UAAU;4CAAiB;IA3C7B,OAAO;QARnB,MAAM,CAAC;YACN,UAAU,EAAE,SAAS;YACrB,MAAM,EAAE,oCAAoC;YAC5C,SAAS,EAAE,sBAAsB;YACjC,IAAI,EAAE,8DAA8D;YACpE,SAAS,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACtE,CAAC;OAEW,OAAO,CAmDnB;IAAD,cAAC;CAnDD,AAmDC,CAnD4B,iBAAiB,GAmD7C;SAnDY,OAAO","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, CordovaProperty, Plugin, CordovaCheck, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/merge';\n\n\ndeclare const navigator: any;\n\n/**\n * @name Network\n * @description\n * Requires Cordova plugin: cordova-plugin-network-information. For more info, please see the [Network plugin docs](https://github.com/apache/cordova-plugin-network-information).\n *\n * @usage\n * ```typescript\n * import { Network } from '@ionic-native/network';\n *\n * constructor(private network: Network) { }\n *\n * ...\n *\n * // watch network for a disconnect\n * let disconnectSubscription = this.network.onDisconnect().subscribe(() => {\n *   console.log('network was disconnected :-(');\n * });\n *\n * // stop disconnect watch\n * disconnectSubscription.unsubscribe();\n *\n *\n * // watch network for a connection\n * let connectSubscription = this.network.onConnect().subscribe(() => {\n *   console.log('network connected!');\n *   // We just got a connection but we need to wait briefly\n *â€¨   // before we determine the connection type. Might need to wait.\n *   // prior to doing any api requests as well.\n *   setTimeout(() => {\n *     if (this.network.type === 'wifi') {\n *       console.log('we got a wifi connection, woohoo!');\n *     }\n *   }, 3000);\n * });\n *\n * // stop connect watch\n * connectSubscription.unsubscribe();\n *\n * ```\n * @advanced\n * The `type` property will return one of the following connection types: `unknown`, `ethernet`, `wifi`, `2g`, `3g`, `4g`, `cellular`, `none`\n */\n@Plugin({\n  pluginName: 'Network',\n  plugin: 'cordova-plugin-network-information',\n  pluginRef: 'navigator.connection',\n  repo: 'https://github.com/apache/cordova-plugin-network-information',\n  platforms: ['Amazon Fire OS', 'Android', 'Browser', 'iOS', 'Windows']\n})\n\nexport class Network extends IonicNativePlugin {\n\n  /**\n   * Connection type\n   * @return {string}\n   */\n  @CordovaProperty\n  type: string;\n\n  /**\n   * Downlink Max Speed\n   * @return {string}\n   */\n  @CordovaProperty\n  downlinkMax: string;\n\n  /**\n   * Returns an observable to watch connection changes\n   * @return {Observable<any>}\n   */\n  @CordovaCheck()\n  onchange(): Observable<any> {\n    return Observable.merge(this.onConnect(), this.onDisconnect());\n  }\n\n  /**\n   * Get notified when the device goes offline\n   * @returns {Observable<any>} Returns an observable.\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'offline'\n  })\n  onDisconnect(): Observable<any> { return; }\n\n  /**\n   * Get notified when the device goes online\n   * @returns {Observable<any>} Returns an observable.\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'online'\n  })\n  onConnect(): Observable<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}