{"version":3,"sources":["../../../src/@ionic-native/plugins/native-geocoder/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAExE;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AASH;IAAoC,kCAAiB;IAArD;;IA4BA,CAAC;IA1BC;;;;;OAKG;IAIH,uCAAc,GAAd,UAAe,QAAgB,EAAE,SAAiB,IAA0C,MAAM,CAAC,CAAC,CAAC;IAErG;;;;OAIG;IAIH,uCAAc,GAAd,UAAe,aAAqB,IAA0C,MAAM,CAAC,CAAC,CAAC;IAClF,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAhBA;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;wDACmG;IAUrG;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;wDACqF;IArB5E,cAAc;QAR1B,MAAM,CAAC;YACN,UAAU,EAAE,gBAAgB;YAC5B,MAAM,EAAE,+BAA+B;YACvC,SAAS,EAAE,gBAAgB;YAC3B,IAAI,EAAE,gEAAgE;YACtE,SAAS,EAAE,CAAC,KAAK,EAAE,SAAS,CAAC;SAC9B,CAAC;OAEW,cAAc,CA4B1B;IAAD,qBAAC;CA5BD,AA4BC,CA5BmC,iBAAiB,GA4BpD;SA5BY,cAAc","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n\n/**\n * @name Native Geocoder\n * @description\n * Cordova plugin for native forward and reverse geocoding\n *\n * @usage\n * ```typescript\n * import { NativeGeocoder, NativeGeocoderReverseResult, NativeGeocoderForwardResult } from '@ionic-native/native-geocoder';\n *\n * constructor(private nativeGeocoder: NativeGeocoder) { }\n *\n * ...\n *\n * this.nativeGeocoder.reverseGeocode(52.5072095, 13.1452818)\n *   .then((result: NativeGeocoderReverseResult) => console.log(JSON.stringify(result)))\n *   .catch((error: any) => console.log(error));\n *\n * this.nativeGeocoder.forwardGeocode('Berlin')\n *   .then((coordinates: NativeGeocoderForwardResult) => console.log('The coordinates are latitude=' + coordinates.latitude + ' and longitude=' + coordinates.longitude))\n *   .catch((error: any) => console.log(error));\n * ```\n * @interfaces\n * NativeGeocoderReverseResult\n * NativeGeocoderForwardResult\n */\n@Plugin({\n  pluginName: 'NativeGeocoder',\n  plugin: 'cordova-plugin-nativegeocoder',\n  pluginRef: 'nativegeocoder',\n  repo: 'https://github.com/sebastianbaar/cordova-plugin-nativegeocoder',\n  platforms: ['iOS', 'Android']\n})\n\nexport class NativeGeocoder extends IonicNativePlugin {\n\n  /**\n   * Reverse geocode a given latitude and longitude to find location address\n   * @param latitude {number} The latitude\n   * @param longitude {number} The longitude\n   * @return {Promise<NativeGeocoderReverseResult>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  reverseGeocode(latitude: number, longitude: number): Promise<NativeGeocoderReverseResult> { return; }\n\n  /**\n   * Forward geocode a given address to find coordinates\n   * @param addressString {string} The address to be geocoded\n   * @return {Promise<NativeGeocoderForwardResult>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  forwardGeocode(addressString: string): Promise<NativeGeocoderForwardResult> { return; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\n/**\n * Encapsulates format information about a reverse geocoding result.\n * more Info: \n *  - https://developer.apple.com/documentation/corelocation/clplacemark\n *  - https://developer.android.com/reference/android/location/Address.html\n */\nexport interface NativeGeocoderReverseResult {\n  /**\n   * The country code.\n   */\n  countryCode: string;\n  /**\n   * The country name.\n   */\n  countryName: string;\n  /**\n   * The postal code.\n   */\n  postalCode: string;\n  /**\n   * The administrativeArea.\n   */\n  administrativeArea: string;\n  /**\n   * The subAdministrativeArea.\n   */\n  subAdministrativeArea: string;\n  /**\n   * The locality.\n   */\n  locality: string;\n  /**\n   * The subLocality.\n   */\n  subLocality: string;\n  /**\n   * The thoroughfare.\n   */\n  thoroughfare: string;\n  /**\n   * The subThoroughfare.\n   */\n  subThoroughfare: string;\n}\n\n/**\n * Encapsulates format information about a forward geocoding result.\n */\nexport interface NativeGeocoderForwardResult {\n  /**\n   * The latitude.\n   */\n  latitude: string;\n  /**\n   * The longitude.\n   */\n  longitude: string;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}